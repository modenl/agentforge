# Cursor AI Assistant Rules for Screen Control Agents Project

## üö´ CRITICAL DOCUMENTATION RULES

- **STOP AND ASK FIRST** - Before creating ANY new file ending in .md, .txt, .doc, or any documentation
- **NO EXCEPTIONS** - Even if it seems "helpful" or "related" to the task
- **PAUSE AND CONFIRM** - Always ask: "Should I create a [filename] to document this?"
- **ONE TASK AT A TIME** - Complete the requested task first, then separately ask about documentation
- **NEVER ASSUME** - Don't assume documentation is wanted just because you added a feature

## üö´ CRITICAL TESTING RULES

- **DO NOT CREATE TEST FILES** - Never create .html, .test.js, .spec.js, or any test files without explicit request
- **DO NOT RUN TESTS** - Never automatically run tests or suggest running tests unless specifically asked
- **NO TEMPORARY TEST FILES** - Don't create temporary files to validate functionality
- **ASK BEFORE TESTING** - If testing seems necessary, ask permission first

### Mandatory Checks Before Creating Documentation:

1. **STOP** - Is this a .md, .txt, .rst, .doc file?
2. **ASK** - "Do you want me to create documentation for this?"
3. **WAIT** - For explicit approval before proceeding
4. **SEPARATE** - Handle documentation as a separate task

## üìù Code Modification Guidelines

- Always ask before making major architectural changes
- Prefer editing existing files over creating new ones
- When creating new CODE files, ask for confirmation first
- Keep changes focused and minimal
- Test builds after significant changes

## üîç Debug and Logging Rules

- Remove excessive debug logs that impact performance
- Keep error handling and critical logs
- Don't add verbose console.log statements without request
- Focus on clean, production-ready code

## üìÅ File Organization

- Follow existing project structure
- Don't reorganize files without explicit request
- Respect the current folder hierarchy
- Ask before adding new directories

## üõ†Ô∏è Development Practices

- Always verify code changes with build tests
- Preserve existing functionality when refactoring
- Comment complex logic but avoid over-commenting
- Use consistent coding style with existing codebase

## üéØ Project-Specific Rules

- This is an Electron app with Svelte frontend
- Adaptive cards should follow single-card paradigm (0 or 1 cards only)
- Streaming performance is critical - avoid performance-impacting logs
- Maintain compatibility with existing GPT agent integration

## üßπ Code Simplicity Rules

- **AVOID SPECIAL CASE LOGIC** - Minimize Array.isArray(), typeof checks, and format conversions
- **ENFORCE DATA CONTRACTS** - Use prompts to strictly require correct data formats instead of handling multiple formats
- **GLOBAL/ASSIST DATA MUST BE OBJECTS** - Never arrays or strings, always proper AdaptiveCard objects
- **NO COMPATIBILITY LAYERS** - Remove legacy format support, enforce single correct format
- **PREFER PROMPT FIXES** - Fix data format issues in AI prompts, not in processing code

## ü§ñ AI Model Configuration Rules

- **NEVER modify the configured AI models** in src/config/config.js
- **DO NOT change** orchestrator model from gemini-2.0-flash-exp
- **DO NOT change** education model from gpt-4o-mini
- **DO NOT change** ui model from gpt-4o-mini
- **PRESERVE** all model assignments exactly as configured
- If there are API errors, troubleshoot the API keys or client setup instead
- Only modify models if explicitly requested by the user

## üí¨ Communication

- Ask clarifying questions when requirements are unclear
- Confirm before making destructive changes
- Explain the impact of proposed changes
- Suggest alternatives when appropriate
- **ALWAYS ASK** before creating documentation files

## ‚ùå What NOT to do

- Don't create README files, guides, or tutorials without being asked
- Don't add new dependencies without discussion
- Don't remove existing functionality without confirmation
- Don't create "helpful" documentation automatically
- Don't reorganize project structure unilaterally
- **NEVER create .md files in the same response as code changes**
- **NEVER assume documentation is wanted**
- **NEVER create test files** (.html, .js, .test._, .spec._, etc.) without explicit request
- **NEVER run tests automatically** or suggest running tests unless asked
- **DON'T create temporary test files** to validate functionality

## ‚úÖ What TO do

- Focus on the specific task requested
- Make minimal, targeted changes
- Preserve existing functionality
- Ask for guidance when uncertain
- Test changes when possible
- **Ask separately about documentation after completing the main task**

## üõë REMINDER BEFORE EVERY FILE CREATION

**Before creating ANY file, ask yourself:**

1. Is this a documentation file? (.md, .txt, .doc, etc.)
2. Is this a test file? (.html, .test._, .spec._, etc.)
3. Was I specifically asked to create this type of file?
4. Should I ask permission first?

**If ANY answer is yes to #1 or #2 and no to #3, then STOP and ASK FIRST.**
